# Function to simulate the temperature process and calculate P
simulate_p <- function(t_increment, repeat_num) {
amount_of_increments <- 1 / t_increment   # Number of increments from 0 to 1
p_values <- numeric(repeat_num)  # To store proportion of
# time with positive temperature
# Monte Carlo simulation
for (i in 1:repeat_num) {
temperature <- numeric(amount_of_increments + 1)
for (j in 2:(amount_of_increments + 1)) {
temperature[j] <- temperature[j - 1] +
rnorm(1, mean = 0, sd = sqrt(t_increment))
# normal distribution with variance increment
}
# Calculate P for this number
p_values[i] <- mean(temperature > 0)  # Proportion of time with X(t) > 0
}
return(p_values)
}
# Parameters (change these)
increments <- c(0.01, 0.001)  # Different t_increment values
repeat_num <- 10000 # Number of times to simulate
# Simulate for each t_increment and store results
results <- list()
for (t_increment in increments) {
cat("Simulating for t_increment =", t_increment, "\n")
p_values <- simulate_p(t_increment, repeat_num)
results[[as.character(t_increment)]] <- p_values
}
# Plotting the results for each t_increment
par(mfrow = c(1, length(increments)))  # Set up a plot for each t_increment
for (t_increment in increments) {
hist(results[[as.character(t_increment)]],
breaks = (1 / t_increment), probability = TRUE,
main = paste("Distribution of P (t_increment =", t_increment, ")"),
xlab = "Proportion of time with positive temperature",
ylab = "Frequency of Proportion P",
col = "#1d0fdf", border = "#000000")
}
results
# part 1
seq(0,100,by=5)
x=rep(1:5,rep(6,5))
y=rep(6,6)
z=c(x,y)
z
x=rep(1:4,seq(1,4))
x
x<-data.frame(student_names=c("Andrew","Regina","Darren","Michael","Nancy"), gender=c("M","F","M","M","F"), grade=c("B","A","B","C","B"))
# part 2
pulse <- read.table("Pulse.txt",header=TRUE)
# part 1
seq(0,100,by=5)
x=rep(1:5,rep(6,5))
y=rep(6,6)
z=c(x,y)
z
x=rep(1:4,seq(1,4))
x
x<-data.frame(student_names=c("Andrew","Regina","Darren","Michael","Nancy"), gender=c("M","F","M","M","F"), grade=c("B","A","B","C","B"))
# part 2
pulse <- read.table("pulse.txt",header=TRUE)
summary(results)
# Function to simulate the temperature process and calculate P
simulate_p <- function(t_increment, repeat_num) {
amount_of_increments <- 1 / t_increment   # Number of increments from 0 to 1
p_values <- numeric(repeat_num)  # To store proportion of
# time with positive temperature
# Monte Carlo simulation
for (i in 1:repeat_num) {
temperature <- numeric(amount_of_increments + 1)
for (j in 2:(amount_of_increments + 1)) {
temperature[j] <- temperature[j - 1] +
rnorm(1, mean = 0, sd = sqrt(t_increment))
# normal distribution with variance increment
}
# Calculate P for this number
p_values[i] <- mean(temperature > 0)  # Proportion of time with X(t) > 0
}
return(p_values)
}
# Parameters (change these)
increments <- c(0.01, 0.001)  # Different t_increment values
repeat_num <- 10000 # Number of times to simulate
# Simulate for each t_increment and store results
results <- list()
for (t_increment in increments) {
cat("Simulating for t_increment =", t_increment, "\n")
p_values <- simulate_p(t_increment, repeat_num)
results[[as.character(t_increment)]] <- p_values
}
# Plotting the results for each t_increment
par(mfrow = c(1, length(increments)))  # Set up a plot for each t_increment
for (t_increment in increments) {
hist(results[[as.character(t_increment)]],
breaks = (1 / t_increment), probability = TRUE,
main = paste("Distribution of P (t_increment =", t_increment, ")"),
xlab = "Proportion of time with positive temperature",
ylab = "Frequency of Proportion P",
col = "#1d0fdf", border = "#000000")
}
summary(results)
summary(results[1])
save.image("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/dataa.RData")
# Dependencies:
# install.packages("readxl")
# install.packages("ggplot2")
# install.packages("knitr")
# install.packages("reshape2")
# while (dev.cur() > 1) dev.off() (resets all the plots)
# Load necessary libraries
library(readxl)
# Dependencies:
# install.packages("readxl")
# install.packages("ggplot2")
# install.packages("knitr")
# install.packages("reshape2")
# while (dev.cur() > 1) dev.off() (resets all the plots)
# Load necessary libraries
library(readxl)
library(ggplot2)
library(knitr)
library(reshape2)
# Import the dataset
team_stats <- read_excel("team_stats.xls")
# Define the number of simulations
simulations <- 100
# Function to calculate points based on goals scored
calculate_points <- function(home_goals, away_goals) {
if (home_goals > away_goals) {
return(c(3, 0))  # Home team wins
} else if (home_goals < away_goals) {
return(c(0, 3))  # Away team wins
} else {
return(c(1, 1))  # Draw
}
}
# Function to simulate a match between home and away teams
simulate_match <- function(home_team, away_team) {
# Get the attacking and defensive strengths for both teams
home_attack_strength <- team_stats$`Attacking Strength`[team_stats$Squad == home_team]
away_defense_strength <- team_stats$`Defensive Strength`[team_stats$Squad == away_team]
away_attack_strength <- team_stats$`Attacking Strength`[team_stats$Squad == away_team]
home_defense_strength <- team_stats$`Defensive Strength`[team_stats$Squad == home_team]
# Calculate expected goals for both teams
home_xG <- home_attack_strength * away_defense_strength
away_xG <- away_attack_strength * home_defense_strength
# Simulate the number of goals using Poisson distribution
home_goals <- rpois(1, home_xG)
away_goals <- rpois(1, away_xG)
# Calculate points for the match
points <- calculate_points(home_goals, away_goals)
return(points)
}
# Initialize an empty matrix to store the total points
team_points <- setNames(rep(0, nrow(team_stats)), team_stats$Squad)
# Run simulations for each pair of teams (home vs away)
for (i in 1:nrow(team_stats)) {
for (j in 1:nrow(team_stats)) {
if (i != j) {
home_team <- team_stats$Squad[i]
away_team <- team_stats$Squad[j]
# Simulate the match for the specified number of simulations
home_points_sim <- numeric(simulations)
away_points_sim <- numeric(simulations)
for (k in 1:simulations) {
points <- simulate_match(home_team, away_team)
home_points_sim[k] <- points[1]
away_points_sim[k] <- points[2]
}
# Calculate average points for the home and away teams across simulations
avg_home_points <- mean(home_points_sim)
avg_away_points <- mean(away_points_sim)
# Update the total points for both home and away teams
team_points[home_team] <- team_points[home_team] + avg_home_points
team_points[away_team] <- team_points[away_team] + avg_away_points
}
}
}
# Print the final points after all simulations
print(team_points)
# You can save the results to a file if desired
write.csv(team_points, "final_team_points.csv", row.names = TRUE)
message("Simulation Completed Successfully!")
# - - - - - - - - - - -
# Create a bar plot for final team points
ggplot(data.frame(Team = names(team_points), Points = team_points), aes(x = reorder(Team, -Points), y = Points)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Predicted Final Points for Each Team", x = "Team", y = "Points") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate x labels for better readability
# Create a density plot to visualize the distribution of points across all teams
simulated_points <- rep(team_points, each = simulations)  # Replicate points for each simulation
# Create a dataframe with the replicated points for plotting
points_data <- data.frame(Team = rep(names(team_points), each = simulations), Points = simulated_points)
# Create the density plot
ggplot(points_data, aes(x = Points)) +
geom_density(fill = "lightblue", alpha = 0.7) +
facet_wrap(~ Team) +
theme_minimal() +
labs(title = "Distribution of Simulated Points for Each Team", x = "Points", y = "Density")
# Convert the team_points into a data frame
team_points_df <- data.frame(Team = names(team_points), Points = team_points)
# Print the table
kable(team_points_df, caption = "Final Predicted Points for Each Team", format = "html")
# Create a matrix to store the average points for home and away teams
home_away_points <- matrix(0, nrow = nrow(team_stats), ncol = nrow(team_stats))
rownames(home_away_points) <- team_stats$Squad
colnames(home_away_points) <- team_stats$Squad
# Populate the matrix with average points
for (i in 1:nrow(team_stats)) {
for (j in 1:nrow(team_stats)) {
if (i != j) {
home_team <- team_stats$Squad[i]
away_team <- team_stats$Squad[j]
# Simulate the match for the specified number of simulations
home_points_sim <- numeric(simulations)
away_points_sim <- numeric(simulations)
for (k in 1:simulations) {
points <- simulate_match(home_team, away_team)
home_points_sim[k] <- points[1]
away_points_sim[k] <- points[2]
}
# Calculate average points for home and away teams
avg_home_points <- mean(home_points_sim)
avg_away_points <- mean(away_points_sim)
# Update the matrix
home_away_points[home_team, away_team] <- avg_home_points
home_away_points[away_team, home_team] <- avg_away_points
}
}
}
# Create a heatmap of the home vs away average points
# Reshape data for ggplot
home_away_points_melted <- melt(home_away_points)
# Annotated heatmap with average points displayed on tiles
ggplot(home_away_points_melted, aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
geom_text(aes(label = round(value, 1)), color = "black", size = 3) +  # Add annotations
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Avg Points") +
labs(
title = "Home vs Away Average Points",
x = "Home Team",
y = "Away Team"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),  # Angled for readability
axis.text.y = element_text(hjust = 1),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
# Convert the team_points vector into a dataframe for easy viewing
final_results <- data.frame(Team = names(team_points), PredictedPoints = team_points)
# You can view it or export to a CSV
write.csv(final_results, "final_results.csv", row.names = FALSE)
# Optional: print the table for review
print(final_results)
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/test.R")
View(final_results)
View(final_results)
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/test.R")
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/test.R")
View(final_results)
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/test.R")
View(final_results)
View(final_results)
final_results <- data.frame(PredictedPoints = team_points_1)
View(final_results)
View(final_results)
View(team_points_list)
View(team_points_list)
team_points_list <- list()
for(name in 1:nrow(team_stats)){
team_name <- team_stats$Squad[name]
team_points_list[[team_name]] <- numeric(30)
}
View(team_points_list)
View(team_points_list)
tl <- list(team_poitns_1)
tl <- list(team_points_1)
View(tl)
View(tl)
tl <- list( a = team_points_1)
View(tl)
View(tl)
t_list <- list()
for(name in team_stats$Squad){
t_list[[name]] <- numeric()
}
View(team_points_list)
View(team_points_list)
View(t_list)
View(t_list)
for(name in teams_stats$Squad)
{
t_list[[name]] <- c( t_list[[name]],team_points_1[name])
}
for(name in team_stats$Squad)
{
t_list[[name]] <- c( t_list[[name]],team_points_1[name])
}
View(t_list)
View(t_list)
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/test.R")
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/test.R")
View(t_list)
View(t_list)
result_1 <- data.frame(PredictedPoints = t_1ist)
result_1 <- data.frame(t_1ist)
result_1 <- data.frame(t_list)
View(result_1)
View(result_1)
result_1 <- data.frame(rbind(t_list))
result_1 <- data.frame(t_list)
?data.frame
result_1 <- data.frame(points -> mean(t_list))
result_1 <- data.frame(points -> average(t_list))
df <- do.call(rbind, t_list)
df <- as.data.frame(df
df <- as.data.frame(df)
View(df)
View(df)
df <- as.data.frame(points = mean(df))
View(t_list)
View(t_list)
View(result_1)
View(result_1)
View(t_list)
View(t_list)
View(result_1)
View(result_1)
View(t_list)
View(t_list)
result_1 <- data.frame( names = names(t_list), avg_points = sapply(t_list,mean))
?sapply
?stddev
?var
result_1 <- data.frame( names = names(t_list),
avg_points = sapply(t_list,mean),
std_dev =  sapply(t_list,sd))
result_1 <- data.frame( names = names(t_list),
avg_points = sapply(t_list,mean),
std_dev =  sapply(t_list,sd),
moe = 1.96*(result_1$std_dev/sqrt(100)))
result_1 <- result_1[order(result_1$avg_points)]
result_1 <- result_1[order(result_1$avg_points),]
result_1 <- result_1[order(result_1$avg_points),decreasing = TRUE]
result_1 <- result_1[order(result_1$avg_points),decreasing = TRUE,]
result_1 <- result_1[order(result_1$avg_points, decreasing = TRUE), ]
result_1 <- data.frame( avg_points = sapply(t_list,mean),
std_dev =  sapply(t_list,sd),
moe = 1.96*(result_1$std_dev/sqrt(100)))
result_1 <- result_1[order(result_1$avg_points, decreasing = TRUE), ]
#Run simulation 30 times, where matches are simulated 50 times
for(i in 1:30){
team_points <- run_simulations(50)
for(name in team_stats$Squad)
{
t_list[[name]] <- c( t_list[[name]],team_points[name])
}
}
result_2 <- data.frame( avg_points = sapply(t_list,mean),
std_dev =  sapply(t_list,sd),
moe = 1.96*(result_1$std_dev/sqrt(50)))
result_2 <- result_1[order(result_1$avg_points, decreasing = TRUE), ]
message("Simulation Completed Successfully (50 Matches)!")
View(result_2)
View(result_2)
t_list <- lapply(t_list,numeric())
t_list <- lapply(t_list,numeric(0))
t_list <- lapply(t_list,c())
t_list <- lapply(t_list,0)
t_list <- lapply(t_list,function(x)double[0])
t_list <- lapply(t_list,function(x)0)
View(t_list)
View(t_list)
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/test.R")
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/test.R")
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/test.R")
t_list <- empty_list
empty_list <- t_list
empty_list <- t_list
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/test.R")
View(t_list)
View(t_list)
result_1$std_dev
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/test.R")
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/test.R")
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/test.R")
#Run simulation 30 times, where matches are simulated 50 times
t_list <- empty_list
for(i in 1:30){
team_points <- simulate_league(50)
for(name in team_stats$Squad)
{
t_list[[name]] <- c( t_list[[name]],team_points[name])
}
}
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/test.R")
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/MOE.R")
View(result_1)
View(result_1)
View(result_2)
View(result_2)
View(result_3)
View(result_3)
result_3 <- result_3[order(result_3$avg_points, decreasing = TRUE), ]
View(result_3)
View(result_3)
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/MOE.R")
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/MOE.R")
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/MOE.R")
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/MOE.R")
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/MOE.R")
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/MOE.R")
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/MOE.R")
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/MOE.R")
View(result_1)
View(result_1)
source("C:/Users/jofei/OneDrive - Trinity College Dublin/Applied Probability/Lab/MOE.R")
View(result_1)
View(result_1)
View(result_2)
View(result_2)
View(result_3)
View(result_3)
write.csv(result_1, "result_1.csv", row.names = FALSE)
write.csv(result_2, "result_2.csv", row.names = FALSE)
write.csv(result_3, "result_3.csv", row.names = FALSE)
write.csv(result_1, "result_1.csv", row.names = TRUE)
write.csv(result_1, "result_1.csv", row.names = TRUE)
write.csv(result_2, "result_2.csv", row.names = TRUE)
write.csv(result_3, "result_3.csv", row.names = TRUE)
